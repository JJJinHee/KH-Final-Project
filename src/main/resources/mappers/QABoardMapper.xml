<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.project.cs.model.dao.QABoardMapper">

	<resultMap id="qaBoardResultMap" type="com.kh.project.cs.model.vo.QABoard">
		<id property="QNo" column="Q_NO"/>
		<result property="QTitle" column="Q_TITLE"/>
		<result property="QHit" column="Q_HIT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<result property="QContent" column="Q_CONTENT"/>
		<result property="status" column="STATUS"/>
		<result property="secretStatus" column="SECRET_STATUS"/>
		<result property="userName" column="USER_NAME"/>
		<result property="categoryName" column="CATEGORY_NAME"/>
		<result property="userNo" column="USER_NO"/>
		<result property="categoryNo" column="CATEGORY_NO"/>
	</resultMap>
	
	<select id="getListCount" parameterType="com.kh.project.cs.model.vo.Search" resultType="Integer">
	<!-- resultType int 맞나? 검색어 넘어올 경우 동적쿼리 추가 -->
			SELECT
			   COUNT(*)
	      FROM QUESTION Q
	      JOIN MEMBER USING(USER_NO)	  
	     WHERE Q.STATUS = 'N'
	     <if test="searchCondition != null and searchValue != null">
	     	<choose>
	     		<when test="searchCondition.equals('title')">
	     			AND Q_TITLE LIKE '%' || #{ searchValue } || '%'
	     		</when>
	     		<when test="searchCondition.equals('content')">
	     			AND Q_CONTENT LIKE '%' || #{ searchValue } || '%'
	     		</when>
	     		<when test="searchCondition.equals('writer')">
	     			AND USER_NAME LIKE '%' || #{ searchValue } || '%'
	     		</when>
	     	</choose>
	     </if>
	     
	</select>
	
	<select id="selectQAList" parameterType="map" resultMap="qaBoardResultMap">
	<!-- 검색어 넘어올 경우 동적쿼리, 파라미터 타입 pi도 추가해야되는데 두개일경우 어떡하지? 맵으로 받아오기-->	
		  
	  	SELECT *
	FROM (SELECT ROWNUM RNUM, A.*
			FROM(SELECT
                   Q_NO
		     	 , Q_TITLE
		     	 , Q_HIT
		     	 , CREATE_DATE
		     	 , MODIFY_DATE
		     	 , Q_CONTENT
		     	 , Q.STATUS
		    	 , SECRET_STATUS
		     	 , USER_NAME
		     	 , CATEGORY_NAME
		  	  FROM QUESTION Q
		   	  JOIN CATEGORY USING(CATEGORY_NO)
		   	  JOIN MEMBER USING(USER_NO)
		 	 WHERE Q.STATUS = 'N'
			 <if test="searchCondition != null and searchValue != null">
		     	<choose>
		     		<when test="searchCondition.equals('title')">
		     			AND Q_TITLE LIKE '%' || #{ searchValue } || '%'
		     		</when>
		     		<when test="searchCondition.equals('content')">
		     			AND Q_CONTENT LIKE '%' || #{ searchValue } || '%'
		     		</when>
		     		<when test="searchCondition.equals('writer')">
		     			AND USER_NAME LIKE '%' || #{ searchValue } || '%'
		     		</when>
		     	</choose>
		     </if>
		 	 ORDER BY Q_NO DESC) A)
  WHERE RNUM BETWEEN #{ startRow } AND #{ endRow }	<!-- ?부분 pi에서 가져온 스타트로우랑 엔드로우로 수정 -->  
	</select>
	
	
	<insert id="increaseCount" parameterType="_int">
		UPDATE QUESTION
		   SET Q_HIT = Q_HIT + 1
		 WHERE Q_NO = #{ qNo }
	</insert>


	<select id="selectQA" parameterType="_int" resultMap="qaBoardResultMap">
		SELECT
               Q_NO
		     , Q_TITLE
		     , Q_HIT
		     , CREATE_DATE
		     , MODIFY_DATE
		     , Q_CONTENT
		     , Q.STATUS
		     , SECRET_STATUS
		     , USER_NO
		     , CATEGORY_NO
		     , USER_NAME
		     , CATEGORY_NAME
		  FROM QUESTION Q
		  JOIN CATEGORY USING(CATEGORY_NO)
		  JOIN MEMBER USING(USER_NO)
		 WHERE Q.STATUS = 'N'
		   AND Q_NO = #{ Qno }
	</select>
	
	<insert id="insertQA" parameterType="com.kh.project.cs.model.vo.QABoard">
		INSERT
			INTO QUESTION
			(
				Q_NO
			  , Q_TITLE
			  , CREATE_DATE
			  , Q_CONTENT
			  , STATUS
			  , SECRET_STATUS
			  , USER_NO
			  , CATEGORY_NO	
			)
			VALUES
			(
			  	SEQ_Q_NO.NEXTVAL
			  , #{ QTitle }
			  , SYSDATE
			  , #{ QContent }
			  , 'N'
			  , #{ secretStatus }
			  , #{ userNo }
			  , #{ categoryNo } 
			)
	</insert>
	
	<update id="updateQA" parameterType="com.kh.project.cs.model.vo.QABoard">
		UPDATE QUESTION
		   SET Q_TITLE = #{ QTitle }
		     , MODIFY_DATE = SYSDATE
		     , Q_CONTENT = #{ QContent }
		     , SECRET_STATUS = #{ secretStatus }
		     , CATEGORY_NO = #{ categoryNo }
		    WHERE Q_NO = #{ QNo }
	</update>
	
	<delete id="deleteQA" parameterType="_int">
		UPDATE QUESTION
		   SET STATUS = 'Y'
		 WHERE Q_NO = #{ Qno } 
	</delete>
	
</mapper>